import cv2
import os
import re
import glob
import pandas as pd
from skimage.metrics import structural_similarity as ssim
from skimage.metrics import peak_signal_noise_ratio as psnr
from tqdm import tqdm

def _argparse():
    import argparse
    parser = argparse.ArgumentParser(description='Choose result dir generated by I2I')
    parser.add_argument('--targetdir', type=str, help='path to result dir')
    args = parser.parse_args()
    return args

def calc(dirpath):
    l_realB_imgs = [p for p in glob.glob(dirpath + '/**', recursive=True) if re.search('real_B.png', p)]
    l_index = ['realB_imgpath','fakeB_imgpath','PSNR','SSIM']
    df_res = pd.DataFrame(index=l_index)
    for realB_imgpath in tqdm(l_realB_imgs):
        fakeB_imgpath = realB_imgpath.replace('real','fake')
        realB_img = cv2.imread(realB_imgpath)
        fakeB_img = cv2.imread(fakeB_imgpath)
        realB_B, realB_G, realB_R = cv2.split(realB_img)
        fekeB_B, fekeB_G, fakeB_R = cv2.split(fakeB_img)
        PSNR = psnr(realB_B, fekeB_B)
        SSIM = ssim(realB_B, fekeB_B, multichannel=True)
        s_tmp = pd.Series([realB_imgpath,fakeB_imgpath,PSNR,SSIM],index=l_index)
        df_res = pd.concat([df_res,s_tmp],axis=1)
    return df_res.T

def main(args):
    for epochpath in glob.glob(args.targetdir + '/*'):
        df_res = calc(epochpath)
        suffix = args.targetdir.rsplit('/',1)[-1] + '_' + epochpath.rsplit('/',1)[-1]
        savename = 'psnr-ssim_' + suffix + '.csv'
        savepath = os.path.join(epochpath, savename)
        df_res.to_csv(savepath,index=False)


if __name__ == '__main__':
    args = _argparse()
    main(args)

